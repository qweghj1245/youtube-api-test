{"version":3,"sources":["assets/img/Icon-search.svg","redux/video/video.action.js","redux/video/video.const.js","components/Search/Search.jsx","components/Video/Video.jsx","redux/video/video.selector.js","App.js","serviceWorker.js","redux/video/video.reducer.js","redux/root.reducer.js","redux/video/video.saga.js","redux/root.saga.js","redux/store.js","index.js"],"names":["module","exports","getVideoStart","query","type","payload","getVideoSuccess","response","Search","dispatch","useDispatch","useState","searchText","setSearchText","className","placeholder","onChange","e","target","value","onKeyPress","key","search","src","SearchIcon","alt","Video","props","info","id","snippet","title","thumbnails","onClick","window","open","videoId","medium","url","selectVideoList","createSelector","state","video","videoList","App","useSelector","currentPage","filterVideoList","useMemo","filter","item","idx","useEffect","length","map","page","scrollTo","pageChange","changeVideoList","Boolean","location","hostname","match","INITAIL_STATE","getVideoError","videoReducer","action","items","rootReducer","combineReducers","getVideo","videoSagas","api","process","call","fetch","then","data","json","put","takeLatest","all","rootSaga","videoSaga","sagaMiddleware","createSagaMiddleware","middleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a43d845d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Icon-search.cd9e75b5.svg\";","import {\n  GET_VIDEO_START,\n  GET_VIDEO_SUCCESS,\n  GET_VIDEO_FAILURE,\n  PAGE_CHANGE,\n} from './video.const';\n\nexport const getVideoStart = (query) => ({\n  type: GET_VIDEO_START,\n  payload: query,\n});\n\nexport const getVideoSuccess = (response) => ({\n  type: GET_VIDEO_SUCCESS,\n  payload: response,\n});\n\nexport const getVideoFailure = (error) => ({\n  type: GET_VIDEO_FAILURE,\n  payload: error,\n});\n\nexport const pageChange = (page) => ({\n  type: PAGE_CHANGE,\n  payload: page,\n});","export const GET_VIDEO_START = 'GET_VIDEO_START';\nexport const GET_VIDEO_SUCCESS = 'GET_VIDEO_SUCCESS';\nexport const GET_VIDEO_FAILURE = 'GET_VIDEO_FAILURE';\nexport const PAGE_CHANGE = 'PAGE_CHANGE';","import React, { useState } from 'react';\nimport './Search.scss';\nimport { useDispatch } from 'react-redux';\nimport SearchIcon from '../../assets/img/Icon-search.svg';\nimport { getVideoStart } from '../../redux/video/video.action';\n\nexport default function Search() {\n  const dispatch = useDispatch();\n  const [searchText, setSearchText] = useState('');\n  const searchVideo = (e) => {\n    if (e.key === 'Enter') {\n      dispatch(getVideoStart({ search: searchText }));\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <div className=\"input-box\">\n        <input type=\"text\" placeholder='搜尋影片' className='search-input' onChange={e => setSearchText(e.target.value)} onKeyPress={searchVideo} />\n        <img src={SearchIcon} alt=\"search-icon\" className='search-icon' />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Video.scss';\n\nexport default function Video(props) {\n  const { id, snippet: { title, thumbnails } } = props.info;\n\n  const goVideoOnYoutube = () => {\n    window.open(`https://www.youtube.com/watch?v=${id.videoId}`);\n  }\n\n  if (!props) return null;\n  return (\n    <div className=\"video\" onClick={goVideoOnYoutube}>\n      <img src={thumbnails.medium.url} alt=\"video-img\" />\n      <div className=\"video-title\">{title}</div>\n    </div>\n  );\n}","import { createSelector } from 'reselect';\n\nconst selectVideo = state => state.video;\n\nexport const selectVideoList = createSelector(\n  [selectVideo],\n  video => video.videoList,\n);","import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\nimport Search from './components/Search/Search';\nimport Video from './components/Video/Video';\nimport { getVideoStart, pageChange } from './redux/video/video.action';\nimport { selectVideoList } from './redux/video/video.selector';\nfunction App() {\n  const dispatch = useDispatch();\n  const videoList = useSelector(selectVideoList);\n  const currentPage = useSelector(state => state.video.currentPage);\n\n  /* 更換分頁 */\n  const changeVideoList = (page) => {\n    window.scrollTo(0, 0);\n    dispatch(pageChange(page));\n  }\n  /* 篩選列表 */\n  const filterVideoList = useMemo(() => {\n    let max = 10;\n    return videoList.filter((item, idx) => {\n      return idx < max * currentPage && idx >= 10 * (currentPage - 1);\n    });\n  }, [currentPage, videoList]);\n\n  useEffect(() => {\n    dispatch(getVideoStart({ search: '' }));\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Search />\n      <div className=\"video-grid\">\n        {\n          videoList && videoList.length ? filterVideoList.map(video => <Video key={video.id.videoId} info={video} />) : null\n        }\n      </div>\n      <div className=\"pages\">\n        {\n          [1, 2, 3].map(page => <div onClick={() => changeVideoList(page)}>{page}</div>)\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  GET_VIDEO_SUCCESS,\n  GET_VIDEO_FAILURE,\n  PAGE_CHANGE,\n} from './video.const';\n\nconst INITAIL_STATE = {\n  videoList: [],\n  searchText: '',\n  currentPage: 1,\n  getVideoError: null,\n}\n\nconst videoReducer = (state = INITAIL_STATE, action) => {\n  switch (action.type) {\n    case GET_VIDEO_SUCCESS:\n      return {\n        ...state,\n        videoList: action.payload.items,\n        searchText: action.payload.search,\n      }\n    case GET_VIDEO_FAILURE:\n      return {\n        ...state,\n        getVideoError: action.payload,\n      }\n    case PAGE_CHANGE:\n      return {\n        ...state,\n        currentPage: action.payload,\n      }\n    default:\n      return state;\n  }\n};\n\nexport default videoReducer;","import { combineReducers } from 'redux';\nimport videoReducer from './video/video.reducer';\n\nconst rootReducer = combineReducers({\n  video: videoReducer,\n});\n\nexport default rootReducer;\n","import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport {\n  GET_VIDEO_START,\n} from './video.const';\nimport {\n  getVideoSuccess,\n  getVideoFailure,\n} from './video.action';\n\nfunction* getVideo(payload) {\n  try {\n    const { payload: { search='' } } = payload;\n    let api = \n    `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=30&key=${process.env.REACT_APP_YOUTUBE_KEY}&q=${search}`;\n    const response = yield call(() => fetch(api).then(data => data.json()));\n    yield put(getVideoSuccess({ ...response, search }));\n  } catch (error) {\n    yield put(getVideoFailure(error));\n  }\n}\n\nfunction* getVideoStart() {\n  yield takeLatest(GET_VIDEO_START, getVideo);\n}\n\nexport default function* videoSagas() {\n  yield all([\n    call(getVideoStart),\n  ]);\n}","import { all, call } from 'redux-saga/effects';\nimport videoSaga from './video/video.saga';\n\nexport default function* rootSaga() {\n  yield all([\n    call(videoSaga),\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root.reducer';\nimport rootSaga from './root.saga';\nconst sagaMiddleware = createSagaMiddleware();\n\nlet middleware = process.env.REACT_APP_STAGE === 'PROD' ? [sagaMiddleware] : [sagaMiddleware, logger];\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\n\nsagaMiddleware.run(rootSaga);\n\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}